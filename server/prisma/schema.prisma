// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id            String         @id @default(uuid())
  role          UserRole       @default(USER)
  email         String         @unique
  username      String
  password      String
  files         File[]
  folders       Folder[]
  createdAt     DateTime       @default(now())
  refreshTokens RefreshToken[]
}

model RefreshToken {
  id        String    @id @default(uuid())
  tokenHash String    @unique
  userId    String
  user      User      @relation(fields: [userId], references: [id])
  userAgent String?
  ipAddress String?
  expiresAt DateTime
  createdAt DateTime  @default(now())
  revokedAt DateTime?
}

model Folder {
  id       String   @id @default(cuid())
  name     String
  parentId String?
  parent   Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  children Folder[] @relation("FolderHierarchy")
  userId   String
  fullPath String
  user     User     @relation(fields: [userId], references: [id])
  files    File[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, fullPath])
}

model File {
  id         String     @id @default(cuid())
  name       String
  mimeType   String
  size       Int // in bytes
  fullPath   String
  visibility Visibility @default(private)
  folderId   String?
  folder     Folder?    @relation(fields: [folderId], references: [id])
  userId     String
  user       User       @relation(fields: [userId], references: [id])

  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  SharedLink SharedLink[]

  @@unique([userId, fullPath])
}

enum Visibility {
  private
  public
  shared
}

model SharedLink {
  id          String    @id @default(cuid())
  fileId      String
  file        File      @relation(fields: [fileId], references: [id])
  expiresAt   DateTime?
  accessToken String? // optional access control

  createdAt DateTime @default(now())
}
